version: '3.8'

services:
  # 主API服务 - 多实例负载均衡
  yixue-api-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: yixue-api-1
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql+asyncpg://yixue_user:secure_password@postgres:5432/yixue_db
      - SECRET_KEY=${SECRET_KEY:-yixue-secret-key-2024}
      - WORKERS=4
      - LOG_LEVEL=info
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - qdrant
    restart: unless-stopped
    networks:
      - yixue-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.yixue.local`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  yixue-api-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: yixue-api-2
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql+asyncpg://yixue_user:secure_password@postgres:5432/yixue_db
      - SECRET_KEY=${SECRET_KEY:-yixue-secret-key-2024}
      - WORKERS=4
      - LOG_LEVEL=info
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - qdrant
    restart: unless-stopped
    networks:
      - yixue-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # 负载均衡器和反向代理
  traefik:
    image: traefik:v2.10
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --accesslog=true
      - --log.level=INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - yixue-network
    restart: unless-stopped

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - yixue-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL主数据库
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: yixue_db
      POSTGRES_USER: ${POSTGRES_USER:-yixue_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - yixue-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-yixue_user} -d yixue_db"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Qdrant向量数据库
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    networks:
      - yixue-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch全文搜索
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx1g"
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - yixue-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - yixue-network
    restart: unless-stopped

  # 监控可视化 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - yixue-network
    restart: unless-stopped

  # 任务队列 - Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker
    command: celery -A api.tasks worker --loglevel=info --concurrency=4
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql+asyncpg://yixue_user:secure_password@postgres:5432/yixue_db
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - postgres
    networks:
      - yixue-network
    restart: unless-stopped

  # CDN和静态文件服务 - MinIO
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - yixue-network
    restart: unless-stopped

  # 数据库备份服务
  db-backup:
    image: prodrigestivill/postgres-backup-local:latest
    container_name: db-backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: yixue_db
      POSTGRES_USER: ${POSTGRES_USER:-yixue_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_EXTRA_OPTS: -Z6 --schema=public --blobs
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 30
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 3
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
    networks:
      - yixue-network
    restart: unless-stopped

  # Nginx - 静态文件和缓存
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./static:/var/www/static
      - ./uploads:/var/www/uploads
    depends_on:
      - yixue-api-1
      - yixue-api-2
    networks:
      - yixue-network
    restart: unless-stopped

  # Jupyter开发环境（可选）
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: yixue_jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-yixue2024}
    networks:
      - yixue-network
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  qdrant-data:
    driver: local
  elastic-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  minio-data:
    driver: local

networks:
  yixue-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16